{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d64c01a6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: torch in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (2.2.2)\n",
      "Requirement already satisfied: torchvision in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (0.17.2)\n",
      "Requirement already satisfied: tensorboard in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (2.16.2)\n",
      "Requirement already satisfied: sympy in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (1.9)\n",
      "Requirement already satisfied: filelock in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (3.3.1)\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (4.11.0)\n",
      "Requirement already satisfied: fsspec in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (2021.8.1)\n",
      "Requirement already satisfied: networkx in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (2.6.3)\n",
      "Requirement already satisfied: jinja2 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torch) (2.11.3)\n",
      "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torchvision) (8.4.0)\n",
      "Requirement already satisfied: numpy in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from torchvision) (1.22.4)\n",
      "Requirement already satisfied: markdown>=2.6.8 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (3.6)\n",
      "Requirement already satisfied: six>1.9 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (1.16.0)\n",
      "Requirement already satisfied: grpcio>=1.48.2 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (1.62.2)\n",
      "Requirement already satisfied: absl-py>=0.4 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (2.1.0)\n",
      "Requirement already satisfied: protobuf!=4.24.0,>=3.19.6 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (5.26.1)\n",
      "Requirement already satisfied: setuptools>=41.0.0 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (58.0.4)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (2.0.2)\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from tensorboard) (0.7.2)\n",
      "Requirement already satisfied: importlib-metadata>=4.4 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from markdown>=2.6.8->tensorboard) (4.8.1)\n",
      "Requirement already satisfied: zipp>=0.5 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard) (3.6.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from jinja2->torch) (1.1.1)\n",
      "Requirement already satisfied: mpmath>=0.19 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from sympy->torch) (1.2.1)\n",
      "Requirement already satisfied: tqdm in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (4.62.3)\n",
      "Requirement already satisfied: numpy in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (1.22.4)\n",
      "Requirement already satisfied: matplotlib in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (3.4.3)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from matplotlib) (8.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from matplotlib) (3.0.4)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: six in /Users/atoleugazin/opt/anaconda3/lib/python3.9/site-packages (from cycler>=0.10->matplotlib) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install torch torchvision tensorboard\n",
    "!pip install tqdm numpy matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ca8fe9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Aggregation over all clients: 100%|██████| 300/300 [1:55:58<00:00, 23.20s/round]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Aggregation over all clients: 100%|██████| 300/300 [2:09:28<00:00, 25.89s/round]\n"
     ]
    },
    {
     "data": {
      "image/png": "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43XXXQdAv379+PTTTwH46aefWLx4MQCXXHIJqampZGZm1qq+qlQeaty2bRvbtm3jsssuA6yh4YiICDIzM8nIyGDkyJEA3HrrrXz99dflr1u1ahV9+vTBxcWFWbNm0aNHD6BiG//666/l7+PWW2/loYceAuCyyy7jk08+YebMmWzevPmc34sjTbzKGAO5Kdh8Qtl2NJPJA9o0dERKKeV0s6/pUed1Zmdn17i9R48eLFq06JzqXrhwIenp6eXzurKysliwYAH/+Mc/gFNzvD799FOmTJnC/v37efvtt8uHiL766qtq5ypFRkaSmJhY/jwpKanKfefPn8+uXbuIiooqj2Hx4sUMGDCgykTNGFNluZubGzabDeC0JQkc54y98sorhIeHs3nzZmw2G15eXjXWe/311/PEE09wySWX0K9fP0JCQk7bZ/jw4axatYrDhw8zfvx4/v3vfyMiXH311VU1zWk8PT0BawJ82Ty06hJXx/dZ1XutLWMMPXr04Ndff61QnpGRUePVhVXNEwRqnJdXVp/NZmPnzp14e3uTlpZGZGTkOcXuSLt07NxKcqG0iBQTREGxjRidWK+UUk5xySWXUFhYWGG+zLp16/jxxx/P+Nr58+ezbNkyDh06xKFDh1i/fn2V87yuu+46YmNjmTt3LjNnzmTTpk1s2rSpxgni/fv3Z+/evRw8eJCioiIWLFjAuHHjKuxjs9n45JNP2LJlS3kMS5cuZf78+XTt2pWjR4+ybt06wEpAS0pKGDt2LK+//np5glI21BgVFcX69esBynuKqpKVlUVERAQuLi588MEHlJaWAjB27Fjeeecd8vLyKtTr5eXF5Zdfzj333MP06dOrrHPEiBF8+OGHdOrUCRcXF4KDg/nqq68YOnToafv6+/ufMZkuq3PevHmAdTVhaGgoAQEBREVFsWHDBsAaAj548OBZ1VumS5cunDhxojzxKi4uZvv27QQFBREYGMhPP/0EUB7D2RgyZEj5eTRv3jyGDRsGWD2o3bp1Y/78+dx2220UFxefdd2VaeJl51FkTcA8kG912fbWpSSUUsopRITPPvuM5cuX06FDB3r06MHjjz9+xqvmDh06REJCAoMGDSova9euHQEBAVXOxXrsscd47rnnKvS2gLWURWRkJM899xz/+Mc/iIyMJCsrCzc3N15++WUuv/xyunXrxo033lg+LFVm5cqVtGrVilatWpWXjRgxgh07dpCamsrChQu57777iI6O5rLLLqOgoIA77riDNm3a0Lt3b6Kjo/noo48AmD17Nvfffz/Dhw/H1dW12vd9xx13MHfuXAYNGsSePXvKe2quuOIKxo0bR2xsLDExMRUmsN98882ICGPHjq2yzrLeuhEjRgAwbNgwgoKCaNas2Wn7Tps2jbvvvrvC5PqqPP7448THx9O7d29mzZrF3LlzAasHLi0tjZiYGF577bXyKwpDQkIYOnQoPXv2rNXkeg8PDxYtWsRf/vIXoqOjiYmJKb/Q4N1332XmzJkMHjy4fPjwbLz44ou8++679O7dmw8++IAXXniBPXv28NZbb/Hss88yfPhwRowYUd6zej6kqq7BxiY2NtbEx8c79RibPnuJmM1/5c32L/DSgQg2zx6rCwyep7i4uPKrdFTd0Datexdjm+7cuZNu3bo5rX69xU3dOpf2nDNnDpmZmTz55JNOiqppq8tztKqfJxFZb4yJrWp/neNlV9bjFX/SnejWQZp0KaWUapImTJjA/v37+f777xs6FFUFTbzs3IutKy/WnXTntz2CGjYYpZRS6hx99tlnDR2CqoHO8bLzKErH5uJOms1HV6xXSimllFNo4mXnUZRBnnswIERH6or1SimllKp7OtQIzF+bQOtjqQSLLxGBXoQFeDV0SEoppZS6AGmPF9C6mQ+t3DIp9GrOHcPbN3Q4SimllLpAaeIFDOsUSkvXTPp068Ttw9qd+QVKKaXOS3JyMpMmTaJDhw50796dq666ij179nDo0KHy2//ExcURGBhITEwMMTExXHrppeWvHz9+PIMHD65Q5+OPP06rVq2IiYmhe/fuzJ8/v8pj79q1i8GDB+Pp6Vlh7SuAZcuW0aVLFzp27MhTTz1V43uIjo5m8uTJ5/L2G73XX3+d999/H4D33nuPo0ePlm9zvLl3dWr67M7kvffe43e/+x1Q8TPt2bNnhRuSN1U61Ahgs+FRlAF+4Q0diVJKXfCMMUyYMIGpU6eWrxa+adMmjh8/XuEm1VD17V4yMjLYsGEDfn5+HDx4sPz2QXDqlkF79+6lX79+TJw4EXd39wqvDw4O5sUXX2TJkiUVyktLS5k5cybLly8nMjKS/v37M27cOLp3737ae9i5cyc2m42VK1eSm5tb4+1nzkfZavf17e677y5//N5779GzZ88zLnBbWXW36jlbZZ/pzp07GT58OCkpKbi4nOo3KikpKb8PZlOgPV4A+ekINvCt/V3slVJKnZsffvgBd3f3Cn/cY2Jian2D5sWLF3PNNdcwadKkKm8XBNCpUyd8fHxIT08/bVtYWBj9+/c/LSFbu3YtHTt2pH379nh4eDBp0iSWLl1aZf0fffQRt956K2PHjq3QC7Nu3TqGDBlCdHQ0AwYMIDs7m9LSUh588EF69epF7969eemll4CKPUfx8fHlC/k+/vjjzJgxg7FjxzJlyhQOHz7M8OHD6du3L3379i1frR3g6aefplevXkRHRzNr1iz2799P3759y7eXJaCOUlJSyss2b96MiJCQkABAhw4dyMvL4/HHH2fOnDksWrSI+Ph4br755gor17/00kv07duXXr16sWvXrirbqCoffvghAwYMICYmhrvuuqv89kfvvvsunTt3ZuTIkfz8889VvrZbt264ublx8uRJRo0axSOPPMLIkSN54YUXWLFiBX369KFXr17cdtttFBYWsm7dOnr37k1BQQG5ubn06NGDbdu21TpWZ3Faiigi7wBXAynGmJ72smBgIRAFHAJuNMac/lNR33KOW9/9NPFSSl1kvp4FyVvrtErPkC4w7rlqt2/btu20ZKA6q1atIiYmBoAbbriBRx99lPnz5zN79mzCw8OZOHEiDz/88Gmv27BhA506dSIsrPa/148cOVKhxy0yMrLKWxGBdbPu5cuXs3v3bl5++WUmT55MUVERN910EwsXLqR///5kZWXh7e3NG2+8wcGDB9m4cSNubm7l91Ssyfr16/npp5/w9vbm+PHjLF++HC8vL/bu3cvkyZOJj4/n66+/ZsmSJaxZswYfHx/S0tIIDg4mMDCQTZs2ERMTw7vvvsu0adMq1B0WFkZBQQFZWVmsWrWK2NhYVq1axbBhwwgLC8PHx6d834kTJ/Lyyy8zZ84cYmNPLcQeGhrKhg0bePXVV5kzZw5vvfXWae+h8md33XXXsXDhQn7++Wfc3d259957mTdvHpdddhmzZ89m/fr1BAYGMnr0aPr06XNafWvWrMHFxYXmzZsDVs/njz/+SEFBAZ06dWLFihV07tyZKVOm8Nprr/GHP/yBcePG8de//pX8/HxuueWW8mHshuTMvrn3gJeB9x3KZgErjDFPicgs+/O/ODGG2slNsb5r4qWUUo1K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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader, Dataset, Subset\n",
    "import numpy as np\n",
    "import copy\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "import torch.nn.functional as F\n",
    "\n",
    "# Define the CNN model for CIFAR\n",
    "class CNN_v2(nn.Module):\n",
    "    def __init__(self, num_channels):\n",
    "        super(CNN_v2, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(num_channels, 6, kernel_size=5, stride=1)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.conv2 = nn.Conv2d(6, 16, kernel_size=5, stride=1)\n",
    "        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n",
    "        self.fc2 = nn.Linear(120, 84)\n",
    "        self.fc3 = nn.Linear(84, 10)\n",
    "    def forward(self, x):\n",
    "        x = self.pool(nn.functional.relu(self.conv1(x)))\n",
    "        x = self.pool(nn.functional.relu(self.conv2(x)))\n",
    "        x = x.view(-1, 16 * 5 * 5)\n",
    "        x = nn.functional.relu(self.fc1(x))\n",
    "        x = nn.functional.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "# Define the CNN model for MNIST\n",
    "class CNN_v1(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN_v1, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n",
    "        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n",
    "        self.conv2_drop = nn.Dropout2d()\n",
    "        self.fc1 = nn.Linear(320, 50)\n",
    "        self.fc2 = nn.Linear(50, 10)\n",
    "    def forward(self, x):\n",
    "        x = nn.functional.relu(nn.functional.max_pool2d(self.conv1(x), 2))\n",
    "        x = nn.functional.relu(nn.functional.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n",
    "        x = x.view(-1, 320)\n",
    "        x = nn.functional.relu(self.fc1(x))\n",
    "        x = nn.functional.dropout(x, training=self.training)\n",
    "        x = self.fc2(x)\n",
    "        return nn.functional.log_softmax(x, dim=1)\n",
    "\n",
    "# Define the federated averaging function\n",
    "def FedAvg(w_locals):\n",
    "    w_avg = copy.deepcopy(w_locals[0])\n",
    "    for key in w_avg.keys():\n",
    "        for i in range(1, len(w_locals)):\n",
    "            w_avg[key] += w_locals[i][key]\n",
    "        w_avg[key] = torch.div(w_avg[key], len(w_locals))\n",
    "    return w_avg\n",
    "\n",
    "# Testing function to evaluate the model\n",
    "def test_model(model, device, test_loader):\n",
    "    model.eval()\n",
    "    test_loss = 0\n",
    "    correct = 0\n",
    "    with torch.no_grad():\n",
    "        for data, target in test_loader:\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            test_loss += F.cross_entropy(output, target, reduction='sum').item()\n",
    "            pred = output.argmax(dim=1, keepdim=True)\n",
    "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
    "    test_loss /= len(test_loader.dataset)\n",
    "    accuracy = 100. * correct / len(test_loader.dataset)\n",
    "    return accuracy, test_loss\n",
    "\n",
    "# Args class definition for experiment parameters\n",
    "class Args:\n",
    "    def __init__(self, dataset):\n",
    "        self.dataset = dataset\n",
    "        self.device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "        self.num_channels = 3 if dataset == 'cifar' else 1\n",
    "        self.num_users = 10\n",
    "        self.frac = 0.3\n",
    "        self.local_ep = 10\n",
    "        self.local_bs = 20\n",
    "        self.lr = 0.01\n",
    "        self.rounds = 300\n",
    "\n",
    "# Main experiment function\n",
    "def main(args, fedprox=False, mu=0.1):\n",
    "    device = args.device\n",
    "    transform = transforms.Compose([\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) if args.dataset == 'cifar' else transforms.Normalize((0.1307,), (0.3081,))\n",
    "    ])\n",
    "    train_set = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform) if args.dataset == 'cifar' else datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n",
    "    test_set = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform) if args.dataset == 'cifar' else datasets.MNIST(root='./data', train=False, download=True, transform=transform)\n",
    "    test_loader = DataLoader(test_set, batch_size=64, shuffle=False)\n",
    "\n",
    "    global_model = (CNN_v2(args.num_channels) if args.dataset == 'cifar' else CNN_v1()).to(device)\n",
    "    accuracies = []\n",
    "\n",
    "    for round in tqdm(range(args.rounds), desc=\"Aggregation over all clients\", unit=\"round\"):\n",
    "        local_weights = []\n",
    "        for i in range(args.num_users):\n",
    "            local_model = (CNN_v2(args.num_channels) if args.dataset == 'cifar' else CNN_v1()).to(device)\n",
    "            local_model.load_state_dict(global_model.state_dict())\n",
    "            optimizer = optim.SGD(local_model.parameters(), lr=args.lr)\n",
    "            subset_indices = np.random.choice(len(train_set), int(len(train_set) / args.num_users), replace=False)\n",
    "            train_loader = DataLoader(Subset(train_set, subset_indices), batch_size=args.local_bs, shuffle=True)\n",
    "            local_model.train()\n",
    "            for data, target in train_loader:\n",
    "                data, target = data.to(device), target.to(device)\n",
    "                optimizer.zero_grad()\n",
    "                output = local_model(data)\n",
    "                loss = F.cross_entropy(output, target)\n",
    "                if fedprox:\n",
    "                    for param, global_param in zip(local_model.parameters(), global_model.parameters()):\n",
    "                        loss += (mu / 2) * torch.norm(param - global_param) ** 2\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "            local_weights.append(local_model.state_dict())\n",
    "\n",
    "        # Update global weights\n",
    "        global_model.load_state_dict(FedAvg(local_weights))\n",
    "\n",
    "        # Test the model\n",
    "        accuracy, _ = test_model(global_model, device, test_loader)\n",
    "        accuracies.append(accuracy)\n",
    "\n",
    "    return accuracies\n",
    "# Initialize Args for CIFAR-10 and MNIST\n",
    "cifar_args = Args('cifar')\n",
    "mnist_args = Args('mnist')\n",
    "\n",
    "# Run experiments with and without FedProx\n",
    "cifar_accuracies_fedshare = main(cifar_args, fedprox=False)\n",
    "cifar_accuracies_fedprox = main(cifar_args, fedprox=True, mu=0.01)\n",
    "\n",
    "#mnist_accuracies_fedshare = main(mnist_args, fedprox=False)\n",
    "#mnist_accuracies_fedprox = main(mnist_args, fedprox=True, mu=0.01)\n",
    "\n",
    "# Plotting the results for CIFAR-10\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(cifar_accuracies_fedshare, label='CIFAR-10 Accuracy without FedProx')\n",
    "plt.plot(cifar_accuracies_fedprox, label='CIFAR-10 Accuracy with FedProx')\n",
    "plt.xlabel('Communication Rounds')\n",
    "plt.ylabel('Accuracy (%)')\n",
    "plt.title('Comparison of FedShare vs. FedProx on CIFAR-10')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Plotting the results for MNIST"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
